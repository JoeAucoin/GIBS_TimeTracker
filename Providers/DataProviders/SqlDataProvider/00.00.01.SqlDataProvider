/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/



/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/


/****** Object:  Table [dbo].[GIBS_TimeTracker]    Script Date: 7/20/2023 2:13:01 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[GIBS_TimeTracker](
	[TimeTrackerID] [int] IDENTITY(1,1) NOT NULL,
	[WorkDate] [date] NOT NULL,
	[UserID] [int] NOT NULL,
	[StartTime] [datetime] NULL,
	[EndTime] [datetime] NULL,
	[TotalTime] [decimal](10, 2) NULL,
	[WorkEndDate] [date] NULL,
	[CreatedOnDate] [datetime] NULL,
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_GIBS_TimeTracker] PRIMARY KEY CLUSTERED 
(
	[TimeTrackerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO



CREATE TRIGGER dbo.[TIME_DIFFERENCE]
ON dbo.[GIBS_TimeTracker]
AFTER UPDATE  
--[GIBS_TimeTracker].[EndTime] 

AS

IF ( UPDATE (EndTime) )
BEGIN

UPDATE GIBS_TimeTracker SET TotalTime = 
cast(
         (
                    DATEDIFF(MINUTE, GIBS_TimeTracker.StartTime, GIBS_TimeTracker.EndTime) 

         ) AS decimal
      ) /60  ;
END

GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GIBS_TimeTrackerIDPhoto]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[GIBS_TimeTrackerIDPhoto](
	[TTPhotoID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[IDPhoto] varbinary(max) NOT NULL,
	[CreatedOnDate] [datetime] NULL CONSTRAINT [DF_GIBS_TimeTrackerIDPhoto_CreatedOnDate]  DEFAULT (getdate()),
	[CreatedByUserID] [int] NOT NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_GIBS_TimeTrackerIDPhoto] PRIMARY KEY CLUSTERED 
(
	[TTPhotoID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO



/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_CheckInOut_Update]    Script Date: 7/27/2023 8:23:20 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GIBS_TimeTracker_CheckInOut_Update] 
	
	@TimeTrackerID int, 
	@UserID int,
    @StartTime datetime,
	@EndTime datetime
	 
AS 
BEGIN 
	SET NOCOUNT ON;
	Declare @LastModifiedOnDate datetime
	set @LastModifiedOnDate = GETDATE();
	
	UPDATE [dbo].[GIBS_TimeTracker]
   SET [WorkDate] = @StartTime
      ,[StartTime] = @StartTime
      ,[EndTime] = @EndTime
      ,[WorkEndDate] = @EndTime
      ,[LastModifiedByUserID] = @UserID
      ,[LastModifiedOnDate] = @LastModifiedOnDate
 WHERE [TimeTrackerID] = @TimeTrackerID
	
END
GO



/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_GetCheckInReport_ForUser]    Script Date: 7/27/2023 11:07:31 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[GIBS_TimeTracker_GetCheckInReport_ForUser]


	
	@StartDate date,
	@EndDate date,
	@TTUserID int

as

SELECT        Users.UserID, Users.Username, Users.FirstName, Users.LastName, Users.Email, Users.DisplayName, 

Coalesce(GIBS_TimeTrackerIDPhoto.IDPhoto, 0x89504E470D0A1A0A0000000D49484452000000C8000000C80806000000AD58AE9E0000000473424954080808087C086488000000097048597300000B1300000B1301009A9C1800000BFD49444154789CEDDD7B8C55D515C7F1EF0506D029CF11F18140290FC53E140B48AD60B59826164D1F96865A635B131BDB3FD434B5FF34694C63DBD43431DAF4611F266DB541628C60695AB06A2DA94A8D2FA4C50745AB0CA0228EBC0666E81F0B2A15C1997BCF59EB9CBD7F9F6425C63F586BF6DDEB9E7BCED9671F10111111111111111111111111111191B734A20BC8CC0060223001180774002381A38036601FD00D6C07B6029B811781F5C026FF72450D52AE49C039C01CE00CE014606893FFD66BC093C0C3C02AE03EE0F5962B14713607F811F02C7644282BF6027F03BE811D91442AAB03B8165847B94D71B8E80556020B814125FFAD227D361EF809B08398C678A77801B81A3BAF1109710C7033B09BF886385C6C04BE0A0C2C690C440ED100AEC44E98A31BA0AFF104F091320643E4609381BF123FE19B895EE026E0E8C2474504B80CE8227EA2B71A6B81D38A1D1AC9D910E016E2277691B113B8B4C841923C1D83DD67889ED065C50DE846B134E9BDC4DDD3F08CC5C0E082C64C32310D5BFF143D79BD6239BA67227D34057899F849EB1D2B687E8D9864623C76173A7AB246C552B44C450E6324B086F8491A1DBF6C752053A3650836064B81D9D18554C0E9D8BAB255D1854875DC40FC377795A207F8784B232AC9B890F80959C5D8041CD7C2B84A02C6025B889F8C558DE5CD0FADA46009F193B0EAF1A5A647576A4D3FADFA16AF624B6EB295E355ACC1C0DDC0E8E8426AE0286004B02CBA10F1730DF1DFCC758ABDD86E2C928176EC0A4DF4A4AB5B2C6E66B0A57EAE227EB2D5317AB0459CD9C9E91C6400F03B6054742135D4C0D669DD135D8894E702E2BF89EB1C6F02C3FB3DEA353720BA00475F892EA0E6DA81CF451721E51841B5F7B0AA4BDCDBDF81AFBB5C8E200BD0A3A545980B8C892EC2532E0DF2C9E802123110F84474119E72689006705E741109991F5D80A71C1AE414325F4F54B0B9D10578CAA141F4A460B12600C74717E125870699115D40824E8F2EC04B0E0D726A7401099A1E5D80971C1A644A7401099A1C5D8097D41B641070427411099A185D8097D41BE458D2FF1B23E8243D111DD105242A9B714DBD4146441790A86C56F5A6DE205A7F558E6C76834FBD41B4197339B279D02EF506E9892E2051BDD1057849BD41BAA30B48D4AEE802BCA4DE205DD10524EA8DE802BCA4DE20AF451790A86CC635F50639B0079614AB33BA002FA937C86E6073741109DA105D8097D41B04E0B9E80212F46C74015E72689035D10524E8E9E802BCE4D0208F451790A06CC63487067928BA80C46C42E72049791CDD0F29D203D10578CAA141F602F74517919015D10578CAA141402FA42C92C63241C7610B17A3F7B6AD7B64773E97CB11A413F84B741109B83DBA006FB93408C0AFA20BA8B96EEC054492A821D8B293E89F29758DDBFA3FE4F597CD9361D839C87B8079D185D4D4978197A38B90727560F744A2BF8DEB167F6A66B05390D3110460277614393BBA909AB904F84F7411E263387A577A7FE28EE686390DB91D41C09E11791DB830BA901AD8095C046C8B2E447C3580FB89FF76AE7A5CDBEC004BFD4D05B6133F09AB1A8FA07DC5B2FC8975C0ABFB432FF83CD476EC659D5BA20B9178BF27FEDBBA6A71494B232A4969079E207E5256256E6A6D38254513808DC44FCEE8F8233AEF90C398815DCE8C9EA451B11ABB892A72581F25CF2B5B6BD0BBE4A58FE691D77AAD2780B1858C9C64E34CEC1270F4E42D3BFE0E8C2E68CC243353B11D04A3277159712719BD294ACAD1812DF58E9ECC45462F701D793D4D2A251A804DA814367DD882560E4849CEC636C28E9EE4CDC672327ABFB9C4381AF821B087F809DFD7D884968E88B3938165C44FFE23C52EAC99B379A7B954CF1C6C794674331C1C3B811F032796F8778BF4CB07805BB0975B4635C6BF816F0363CAFD53459AD70E7C01B80BFB262FBB293A819F02E7624F494AC134A8E5198A5DF9FA18F653EC0C60588BFFE6466C7FDC55D82EEB8F618D2225C9B941066057A506026F62F739CAD400C66327F8138071D88DC851D81DEDC1D84DBCEEFDF56CC5EE5BBC00ACC75E7BE6F9FAE501FBEBDA8B6D7491A5D41B6410701A30133B4F988A4DD2B1FCFFD59DBDD872EFDF02BF0676F8965919C3B01D141701A7036DFBFF7F0FD6B09DD8B9CE3A6C91E323C05A7414AB950EE072E06E9A5B95DB095C415E4B31DA80AB8057E8FF786DC636B5BE18ADEDAAB479C062ECE7401127C0ABB16FD1D4CD019EA29831DB865D3478BFEB5F20477401F030E55C25DA035C8FED0C9F9A76E046CA5B63F60760B6DB5F2387F820F6EEC1B22EA11E1C6BB1A70D53311F3BF1F718BB25C04497BF4A00FB36FF3EFEEBA17AB13BD4755EBAD101DC8AEFB8EDC31E63BE9AF42F0A859BC25BD7FEA3E245EAB9AFEF22E25F20B4123DDE5B9AF9D8A6D3911FF0C1B1187B3968D54DC496BA478FD7C15F30395CFC70B5886A2E31DF067C0BBBE15835C381EF62F774A2C7E9EDD185AD3090025C42F59FE6EBC41A65644963D01FC7624F406E257E5C8E143B8073CA19827C2CC0EE72477F987D8DEDC02FB05D513C35B06FE4DB28EE3E904774616BD4A40933A8F7266EFF02BE437937CD1AC087B12B7A1B2AF0F7361B9DD8F21FE98731D8C95CF48757543C8FDD61FE3CCDDF13686057F12EC5D68BBD5481BFABA878145BFD5C3955BC2EDDC09ED23B3FBA90126DC5B6FB7C0E7B39E666ECE7C68155B343B193ECB1C049C0FB8053697DB97C95FD1C5B0327EFE26AE2BFD11431F1292AA66A4790A9C0E354F4702BA5DB024CC756155742D55EC1B604981C5D848469C77E56DE155D48152D24FE10AFA8469C454554E527D650E09FD8A3A8228F604BE5F745175295A7E6BE869A43DE3213F86C7411508D23483BF66C82F67392833D8DED23D01B5944158E2057A0E690434D073E135D44F411A40D3B7A689B4C7927FFC096D384893E825C8C9A430EEF0C606E6401D10DF2F5E0FC527D5746268FFC89752AB6DD8CC8917463BF3242EEAE471E412E0BCC2DF531187BA23444D411A4813DC37052507EA9978709DA632BEA08320B3587F4DD2C821EAA8A6A90CA2D6B96CABB28226954832C08CA2BF515F2FAEA887390F1D8F987487FECC6DEA5B2D33369C411647E404EA9BF2104DC348C68106D1826CD3AD73B614483CC0BC82969703F82789F83E8FC435AB107DBED65975742EF2388F78E839296369C7762F46E9059CEF9243D333D937937C80CE77C929EA48F201F72CE27E9719D439E27E92762DB6C8AB4620FB68FC11E8F649E4710BD1A588AD086EDC0E9C2B3414E71CC25699BEE95C8B341A639E692B4B9CD25CF0699E2984BD2E636973C1B6492632E499BDB06E75E0D32103D4128C599E895C8AB418E070639E592F41D8F6DE6503AAF06D1E67052A406D624A5F36A90139CF2483E926A90639DF2483E5CE69457837438E5917C8CF648E2D520A39CF2483E467A24F16A90E14E79241F2E734A0D227535CC238957831CED9447F2D1EE91C4AB418E72CA23F97099535E0D32D4298FE463884712AF06715916205919E891C4AB41DA9CF2483E5CE6AE578344BF0B51A4299AB852573D1E49BC1AA4D7298FE423A95D4D763BE5917C747B24F16A90379CF2483EB67924F16A9090775C4BD2B67824F16A90979CF2483E5CE69457833CE79447F2E132A7BC1AE469A73C928FB51E49BC36AF1E06BC8EEEBB4831D6E3B4CF9AD784ED029E72CA25E95BE595C8F31B7DA5632E49DBBD5E893C1B6499632E49D73EE01EAF649E0D723FB0C9319FA4E9011CE7916783F400BF71CC2769BAD53399F77BD22701CFA0AB59D29C57B04DD0937D4FFAF3C01DCE39251D37E2D81CE07F040138197812EDF62EFDB3057B2F88EBC25797E77ADFE615E0186076406EA9AF6B70BCFF7140C41104ECCEFA1AF4521DE99B0781B9D8255E575127CB5DC017D19386F2EEDE002E25A03920E627D6011BB0C726CF0BAC41AA6D1FB0107828BA9048B76203A150BC3DBE893008B893F80F4351ADF801F23F6DC0EDC47F288A6AC475C8211AC0F5C47F388AB8D80D5C8E1CD1A781D788FFB014BEB11E3813E9931381A5C47F688AF2A317F8197AC952531660CF1E477F888A72E2416016D29281C022E051E23F504531B102381F29DC2CE0666023F11FB2A27FF10CF03D60DA219F6A8545ADC56A550398019C0B9CB5FFBFB5AEAB3AF661FB56ADC67E46FD1958175A5193EADA20EF6438B61C7A1C30167B8F763BF6762B3DA0558E1E6CB95017B015E8045EC09EFBD911589788888888888888888888888888888894E2BFADA42452B9BEA33B0000000049454E44AE426082) 
AS IDPhoto
, 
GIBS_TimeTracker.TimeTrackerID, GIBS_TimeTracker.WorkDate, 
                         GIBS_TimeTracker.StartTime, 
	--Coalesce(GIBS_TimeTracker.EndTime, '') AS  EndTime, 
	--Coalesce(SUBSTRING(REPLACE(CAST(GIBS_TimeTracker.EndTime  AS VARCHAR(20)),'Jan  1 1900 12:00AM',''),1,11),'') AS EndTime,
	GIBS_TimeTracker.EndTime,
	coalesce(GIBS_TimeTracker.TotalTime,0) AS TotalTime, GIBS_TimeTracker.WorkEndDate
FROM            Users INNER JOIN
                         GIBS_TimeTracker ON Users.UserID = GIBS_TimeTracker.UserID 
						 
						 LEFT OUTER JOIN
                         GIBS_TimeTrackerIDPhoto ON Users.UserID = GIBS_TimeTrackerIDPhoto.UserID

WHERE (GIBS_TimeTracker.WorkDate BETWEEN @StartDate AND @EndDate) AND Users.UserID = @TTUserID

ORDER BY GIBS_TimeTracker.StartTime


GO





/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_CheckInOut]    Script Date: 7/27/2023 2:58:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GIBS_TimeTracker_CheckInOut]
(
    @WorkDate date,
	@UserID int,
	@TTUserID int,
    @StartTime datetime,
	@EndTime datetime
)
AS
BEGIN

	Declare @LastModifiedOnDate datetime
	set @LastModifiedOnDate = GETDATE();
	Declare @WorkEndDate date
	Set @WorkEndDate = @EndTime

	Declare @CheckInOut int;
	Set  @CheckInOut = 3
    IF EXISTS (SELECT 1 FROM GIBS_TimeTracker
        WHERE (UserID = @TTUserID) AND (WorkDate = @WorkDate OR WorkDate = DateAdd(DD,-1, @WorkDate)) AND (EndTime  IS NULL)
		)
    BEGIN
	
	Set @CheckInOut = 2

	UPDATE [dbo].[GIBS_TimeTracker]
   SET 
      [EndTime] = @EndTime
      ,[WorkEndDate] = @WorkEndDate

      ,[LastModifiedByUserID] = @UserID
      ,[LastModifiedOnDate] = @LastModifiedOnDate
		  WHERE (UserID = @TTUserID) AND (WorkDate = @WorkDate OR WorkDate = DateAdd(DD,-1, @WorkDate)) AND (EndTime  IS NULL)


	
            
    END
ELSE
    BEGIN

	Set @CheckInOut = 1

	INSERT INTO [dbo].[GIBS_TimeTracker]
           ([WorkDate]
           ,[UserID]
           ,[StartTime]       
           ,[CreatedOnDate]
           ,[CreatedByUserID]
           )
     VALUES
           ( @WorkDate
           ,@TTUserID
           ,@StartTime          
           ,GETDATE()
           ,@UserID   
		 )

	
	
    END

--	SELECT        Users.UserID, Users.Username, Users.FirstName, Users.LastName, Users.Email, Users.DisplayName, GIBS_TimeTrackerIDPhoto.IDPhoto
--FROM            Users LEFT OUTER JOIN
--                         GIBS_TimeTrackerIDPhoto ON Users.UserID = GIBS_TimeTrackerIDPhoto.UserID
--where  Users.UserID = @TTUserID
Select @CheckInOut as CheckInOut


END
GO

/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_GetCheckInOutRecord]    Script Date: 7/27/2023 2:58:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GIBS_TimeTracker_GetCheckInOutRecord]


	
	@TimeTrackerID int

as

SELECT        GIBS_TimeTracker.TimeTrackerID, GIBS_TimeTracker.WorkDate, GIBS_TimeTracker.UserID, GIBS_TimeTracker.StartTime, GIBS_TimeTracker.EndTime, GIBS_TimeTracker.TotalTime, GIBS_TimeTracker.WorkEndDate, 
                         GIBS_TimeTracker.CreatedOnDate, GIBS_TimeTracker.CreatedByUserID, GIBS_TimeTracker.LastModifiedByUserID, GIBS_TimeTracker.LastModifiedOnDate, 
						 
						 Coalesce(GIBS_TimeTrackerIDPhoto.IDPhoto, 0x89504E470D0A1A0A0000000D49484452000000C8000000C80806000000AD58AE9E0000000473424954080808087C086488000000097048597300000B1300000B1301009A9C1800000BFD49444154789CEDDD7B8C55D515C7F1EF0506D029CF11F18140290FC53E140B48AD60B59826164D1F96865A635B131BDB3FD434B5FF34694C63DBD43431DAF4611F266DB541628C60695AB06A2DA94A8D2FA4C50745AB0CA0228EBC0666E81F0B2A15C1997BCF59EB9CBD7F9F6425C63F586BF6DDEB9E7BCED9671F10111111111111111111111111111191B734A20BC8CC0060223001180774002381A38036601FD00D6C07B6029B811781F5C026FF72450D52AE49C039C01CE00CE014606893FFD66BC093C0C3C02AE03EE0F5962B14713607F811F02C7644282BF6027F03BE811D91442AAB03B8165847B94D71B8E80556020B814125FFAD227D361EF809B08398C678A77801B81A3BAF1109710C7033B09BF886385C6C04BE0A0C2C690C440ED100AEC44E98A31BA0AFF104F091320643E4609381BF123FE19B895EE026E0E8C2474504B80CE8227EA2B71A6B81D38A1D1AC9D910E016E2277691B113B8B4C841923C1D83DD67889ED065C50DE846B134E9BDC4DDD3F08CC5C0E082C64C32310D5BFF143D79BD6239BA67227D34057899F849EB1D2B687E8D9864623C76173A7AB246C552B44C450E6324B086F8491A1DBF6C752053A3650836064B81D9D18554C0E9D8BAB255D1854875DC40FC377795A207F8784B232AC9B890F80959C5D8041CD7C2B84A02C6025B889F8C558DE5CD0FADA46009F193B0EAF1A5A647576A4D3FADFA16AF624B6EB295E355ACC1C0DDC0E8E8426AE0286004B02CBA10F1730DF1DFCC758ABDD86E2C928176EC0A4DF4A4AB5B2C6E66B0A57EAE227EB2D5317AB0459CD9C9E91C6400F03B6054742135D4C0D669DD135D8894E702E2BF89EB1C6F02C3FB3DEA353720BA00475F892EA0E6DA81CF451721E51841B5F7B0AA4BDCDBDF81AFBB5C8E200BD0A3A545980B8C892EC2532E0DF2C9E802123110F84474119E72689006705E741109991F5D80A71C1AE414325F4F54B0B9D10578CAA141F4A460B12600C74717E125870699115D40824E8F2EC04B0E0D726A7401099A1E5D80971C1A644A7401099A1C5D8097D41B641070427411099A185D8097D41BE458D2FF1B23E8243D111DD105242A9B714DBD4146441790A86C56F5A6DE205A7F558E6C76834FBD41B4197339B279D02EF506E9892E2051BDD1057849BD41BAA30B48D4AEE802BCA4DE205DD10524EA8DE802BCA4DE20AF451790A86CC635F50639B0079614AB33BA002FA937C86E6073741109DA105D8097D41B04E0B9E80212F46C74015E72689035D10524E8E9E802BCE4D0208F451790A06CC63487067928BA80C46C42E72049791CDD0F29D203D10578CAA141F602F74517919015D10578CAA141402FA42C92C63241C7610B17A3F7B6AD7B64773E97CB11A413F84B741109B83DBA006FB93408C0AFA20BA8B96EEC054492A821D8B293E89F29758DDBFA3FE4F597CD9361D839C87B8079D185D4D4978197A38B90727560F744A2BF8DEB167F6A66B05390D3110460277614393BBA909AB904F84F7411E263387A577A7FE28EE686390DB91D41C09E11791DB830BA901AD8095C046C8B2E447C3580FB89FF76AE7A5CDBEC004BFD4D05B6133F09AB1A8FA07DC5B2FC8975C0ABFB432FF83CD476EC659D5BA20B9178BF27FEDBBA6A71494B232A4969079E207E5256256E6A6D38254513808DC44FCEE8F8233AEF90C398815DCE8C9EA451B11ABB892A72581F25CF2B5B6BD0BBE4A58FE691D77AAD2780B1858C9C64E34CEC1270F4E42D3BFE0E8C2E68CC243353B11D04A3277159712719BD294ACAD1812DF58E9ECC45462F701D793D4D2A251A804DA814367DD882560E4849CEC636C28E9EE4CDC672327ABFB9C4381AF821B087F809DFD7D884968E88B3938165C44FFE23C52EAC99B379A7B954CF1C6C794674331C1C3B811F032796F8778BF4CB07805BB0975B4635C6BF816F0363CAFD53459AD70E7C01B80BFB262FBB293A819F02E7624F494AC134A8E5198A5DF9FA18F653EC0C60588BFFE6466C7FDC55D82EEB8F618D2225C9B941066057A506026F62F739CAD400C66327F8138071D88DC851D81DEDC1D84DBCEEFDF56CC5EE5BBC00ACC75E7BE6F9FAE501FBEBDA8B6D7491A5D41B6410701A30133B4F988A4DD2B1FCFFD59DBDD872EFDF02BF0676F8965919C3B01D141701A7036DFBFF7F0FD6B09DD8B9CE3A6C91E323C05A7414AB950EE072E06E9A5B95DB095C415E4B31DA80AB8057E8FF786DC636B5BE18ADEDAAB479C062ECE7401127C0ABB16FD1D4CD019EA29831DB865D3478BFEB5F20477401F030E55C25DA035C8FED0C9F9A76E046CA5B63F60760B6DB5F2387F820F6EEC1B22EA11E1C6BB1A70D53311F3BF1F718BB25C04497BF4A00FB36FF3EFEEBA17AB13BD4755EBAD101DC8AEFB8EDC31E63BE9AF42F0A859BC25BD7FEA3E245EAB9AFEF22E25F20B4123DDE5B9AF9D8A6D3911FF0C1B1187B3968D54DC496BA478FD7C15F30395CFC70B5886A2E31DF067C0BBBE15835C381EF62F774A2C7E9EDD185AD3090025C42F59FE6EBC41A65644963D01FC7624F406E257E5C8E143B8073CA19827C2CC0EE72477F987D8DEDC02FB05D513C35B06FE4DB28EE3E904774616BD4A40933A8F7266EFF02BE437937CD1AC087B12B7A1B2AF0F7361B9DD8F21FE98731D8C95CF48757543C8FDD61FE3CCDDF13686057F12EC5D68BBD5481BFABA878145BFD5C3955BC2EDDC09ED23B3FBA90126DC5B6FB7C0E7B39E666ECE7C68155B343B193ECB1C049C0FB8053697DB97C95FD1C5B0327EFE26AE2BFD11431F1292AA66A4790A9C0E354F4702BA5DB024CC756155742D55EC1B604981C5D848469C77E56DE155D48152D24FE10AFA8469C454554E527D650E09FD8A3A8228F604BE5F745175295A7E6BE869A43DE3213F86C7411508D23483BF66C82F67392833D8DED23D01B5944158E2057A0E690434D073E135D44F411A40D3B7A689B4C7927FFC096D384893E825C8C9A430EEF0C606E6401D10DF2F5E0FC527D5746268FFC89752AB6DD8CC8917463BF3242EEAE471E412E0BCC2DF531187BA23444D411A4813DC37052507EA9978709DA632BEA08320B3587F4DD2C821EAA8A6A90CA2D6B96CABB28226954832C08CA2BF515F2FAEA887390F1D8F987487FECC6DEA5B2D33369C411647E404EA9BF2104DC348C68106D1826CD3AD73B614483CC0BC82969703F82789F83E8FC435AB107DBED65975742EF2388F78E839296369C7762F46E9059CEF9243D333D937937C80CE77C929EA48F201F72CE27E9719D439E27E92762DB6C8AB4620FB68FC11E8F649E4710BD1A588AD086EDC0E9C2B3414E71CC25699BEE95C8B341A639E692B4B9CD25CF0699E2984BD2E636973C1B6492632E499BDB06E75E0D32103D4128C599E895C8AB418E070639E592F41D8F6DE6503AAF06D1E67052A406D624A5F36A90139CF2483E926A90639DF2483E5CE69457837438E5917C8CF648E2D520A39CF2483E467A24F16A90E14E79241F2E734A0D227535CC238957831CED9447F2D1EE91C4AB418E72CA23F97099535E0D32D4298FE463884712AF06715916205919E891C4AB41DA9CF2483E5CE6AE578344BF0B51A4299AB852573D1E49BC1AA4D7298FE423A95D4D763BE5917C747B24F16A90379CF2483EB67924F16A9090775C4BD2B67824F16A90979CF2483E5CE69457833CE79447F2E132A7BC1AE469A73C928FB51E49BC36AF1E06BC8EEEBB4831D6E3B4CF9AD784ED029E72CA25E95BE595C8F31B7DA5632E49DBBD5E893C1B6499632E49D73EE01EAF649E0D723FB0C9319FA4E9011CE7916783F400BF71CC2769BAD53399F77BD22701CFA0AB59D29C57B04DD0937D4FFAF3C01DCE39251D37E2D81CE07F040138197812EDF62EFDB3057B2F88EBC25797E77ADFE615E0186076406EA9AF6B70BCFF7140C41104ECCEFA1AF4521DE99B0781B9D8255E575127CB5DC017D19386F2EEDE002E25A03920E627D6011BB0C726CF0BAC41AA6D1FB0107828BA9048B76203A150BC3DBE893008B893F80F4351ADF801F23F6DC0EDC47F288A6AC475C8211AC0F5C47F388AB8D80D5C8E1CD1A781D788FFB014BEB11E3813E9931381A5C47F688AF2A317F8197AC952531660CF1E477F888A72E2416016D29281C022E051E23F504531B102381F29DC2CE0666023F11FB2A27FF10CF03D60DA219F6A8545ADC56A550398019C0B9CB5FFBFB5AEAB3AF661FB56ADC67E46FD1958175A5193EADA20EF6438B61C7A1C30167B8F763BF6762B3DA0558E1E6CB95017B015E8045EC09EFBD911589788888888888888888888888888888894E2BFADA42452B9BEA33B0000000049454E44AE426082) 
AS IDPhoto

						 , Users.FirstName, 
                         Users.LastName, Users.Email, Users.DisplayName
FROM            GIBS_TimeTracker LEFT OUTER JOIN
                         Users ON GIBS_TimeTracker.UserID = Users.UserID LEFT OUTER JOIN
                         GIBS_TimeTrackerIDPhoto ON GIBS_TimeTracker.UserID = GIBS_TimeTrackerIDPhoto.UserID
WHERE        (GIBS_TimeTracker.TimeTrackerID = @TimeTrackerID)




GO

/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_GetCheckInReport]    Script Date: 7/27/2023 2:58:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[GIBS_TimeTracker_GetCheckInReport]


	
	@StartDate date,
	@EndDate date

as

SELECT        Users.UserID, Users.Username, Users.FirstName, Users.LastName, Users.Email, Users.DisplayName, 

Coalesce(GIBS_TimeTrackerIDPhoto.IDPhoto, 0x89504E470D0A1A0A0000000D49484452000000C8000000C80806000000AD58AE9E0000000473424954080808087C086488000000097048597300000B1300000B1301009A9C1800000BFD49444154789CEDDD7B8C55D515C7F1EF0506D029CF11F18140290FC53E140B48AD60B59826164D1F96865A635B131BDB3FD434B5FF34694C63DBD43431DAF4611F266DB541628C60695AB06A2DA94A8D2FA4C50745AB0CA0228EBC0666E81F0B2A15C1997BCF59EB9CBD7F9F6425C63F586BF6DDEB9E7BCED9671F10111111111111111111111111111191B734A20BC8CC0060223001180774002381A38036601FD00D6C07B6029B811781F5C026FF72450D52AE49C039C01CE00CE014606893FFD66BC093C0C3C02AE03EE0F5962B14713607F811F02C7644282BF6027F03BE811D91442AAB03B8165847B94D71B8E80556020B814125FFAD227D361EF809B08398C678A77801B81A3BAF1109710C7033B09BF886385C6C04BE0A0C2C690C440ED100AEC44E98A31BA0AFF104F091320643E4609381BF123FE19B895EE026E0E8C2474504B80CE8227EA2B71A6B81D38A1D1AC9D910E016E2277691B113B8B4C841923C1D83DD67889ED065C50DE846B134E9BDC4DDD3F08CC5C0E082C64C32310D5BFF143D79BD6239BA67227D34057899F849EB1D2B687E8D9864623C76173A7AB246C552B44C450E6324B086F8491A1DBF6C752053A3650836064B81D9D18554C0E9D8BAB255D1854875DC40FC377795A207F8784B232AC9B890F80959C5D8041CD7C2B84A02C6025B889F8C558DE5CD0FADA46009F193B0EAF1A5A647576A4D3FADFA16AF624B6EB295E355ACC1C0DDC0E8E8426AE0286004B02CBA10F1730DF1DFCC758ABDD86E2C928176EC0A4DF4A4AB5B2C6E66B0A57EAE227EB2D5317AB0459CD9C9E91C6400F03B6054742135D4C0D669DD135D8894E702E2BF89EB1C6F02C3FB3DEA353720BA00475F892EA0E6DA81CF451721E51841B5F7B0AA4BDCDBDF81AFBB5C8E200BD0A3A545980B8C892EC2532E0DF2C9E802123110F84474119E72689006705E741109991F5D80A71C1AE414325F4F54B0B9D10578CAA141F4A460B12600C74717E125870699115D40824E8F2EC04B0E0D726A7401099A1E5D80971C1A644A7401099A1C5D8097D41B641070427411099A185D8097D41BE458D2FF1B23E8243D111DD105242A9B714DBD4146441790A86C56F5A6DE205A7F558E6C76834FBD41B4197339B279D02EF506E9892E2051BDD1057849BD41BAA30B48D4AEE802BCA4DE205DD10524EA8DE802BCA4DE20AF451790A86CC635F50639B0079614AB33BA002FA937C86E6073741109DA105D8097D41B04E0B9E80212F46C74015E72689035D10524E8E9E802BCE4D0208F451790A06CC63487067928BA80C46C42E72049791CDD0F29D203D10578CAA141F602F74517919015D10578CAA141402FA42C92C63241C7610B17A3F7B6AD7B64773E97CB11A413F84B741109B83DBA006FB93408C0AFA20BA8B96EEC054492A821D8B293E89F29758DDBFA3FE4F597CD9361D839C87B8079D185D4D4978197A38B90727560F744A2BF8DEB167F6A66B05390D3110460277614393BBA909AB904F84F7411E263387A577A7FE28EE686390DB91D41C09E11791DB830BA901AD8095C046C8B2E447C3580FB89FF76AE7A5CDBEC004BFD4D05B6133F09AB1A8FA07DC5B2FC8975C0ABFB432FF83CD476EC659D5BA20B9178BF27FEDBBA6A71494B232A4969079E207E5256256E6A6D38254513808DC44FCEE8F8233AEF90C398815DCE8C9EA451B11ABB892A72581F25CF2B5B6BD0BBE4A58FE691D77AAD2780B1858C9C64E34CEC1270F4E42D3BFE0E8C2E68CC243353B11D04A3277159712719BD294ACAD1812DF58E9ECC45462F701D793D4D2A251A804DA814367DD882560E4849CEC636C28E9EE4CDC672327ABFB9C4381AF821B087F809DFD7D884968E88B3938165C44FFE23C52EAC99B379A7B954CF1C6C794674331C1C3B811F032796F8778BF4CB07805BB0975B4635C6BF816F0363CAFD53459AD70E7C01B80BFB262FBB293A819F02E7624F494AC134A8E5198A5DF9FA18F653EC0C60588BFFE6466C7FDC55D82EEB8F618D2225C9B941066057A506026F62F739CAD400C66327F8138071D88DC851D81DEDC1D84DBCEEFDF56CC5EE5BBC00ACC75E7BE6F9FAE501FBEBDA8B6D7491A5D41B6410701A30133B4F988A4DD2B1FCFFD59DBDD872EFDF02BF0676F8965919C3B01D141701A7036DFBFF7F0FD6B09DD8B9CE3A6C91E323C05A7414AB950EE072E06E9A5B95DB095C415E4B31DA80AB8057E8FF786DC636B5BE18ADEDAAB479C062ECE7401127C0ABB16FD1D4CD019EA29831DB865D3478BFEB5F20477401F030E55C25DA035C8FED0C9F9A76E046CA5B63F60760B6DB5F2387F820F6EEC1B22EA11E1C6BB1A70D53311F3BF1F718BB25C04497BF4A00FB36FF3EFEEBA17AB13BD4755EBAD101DC8AEFB8EDC31E63BE9AF42F0A859BC25BD7FEA3E245EAB9AFEF22E25F20B4123DDE5B9AF9D8A6D3911FF0C1B1187B3968D54DC496BA478FD7C15F30395CFC70B5886A2E31DF067C0BBBE15835C381EF62F774A2C7E9EDD185AD3090025C42F59FE6EBC41A65644963D01FC7624F406E257E5C8E143B8073CA19827C2CC0EE72477F987D8DEDC02FB05D513C35B06FE4DB28EE3E904774616BD4A40933A8F7266EFF02BE437937CD1AC087B12B7A1B2AF0F7361B9DD8F21FE98731D8C95CF48757543C8FDD61FE3CCDDF13686057F12EC5D68BBD5481BFABA878145BFD5C3955BC2EDDC09ED23B3FBA90126DC5B6FB7C0E7B39E666ECE7C68155B343B193ECB1C049C0FB8053697DB97C95FD1C5B0327EFE26AE2BFD11431F1292AA66A4790A9C0E354F4702BA5DB024CC756155742D55EC1B604981C5D848469C77E56DE155D48152D24FE10AFA8469C454554E527D650E09FD8A3A8228F604BE5F745175295A7E6BE869A43DE3213F86C7411508D23483BF66C82F67392833D8DED23D01B5944158E2057A0E690434D073E135D44F411A40D3B7A689B4C7927FFC096D384893E825C8C9A430EEF0C606E6401D10DF2F5E0FC527D5746268FFC89752AB6DD8CC8917463BF3242EEAE471E412E0BCC2DF531187BA23444D411A4813DC37052507EA9978709DA632BEA08320B3587F4DD2C821EAA8A6A90CA2D6B96CABB28226954832C08CA2BF515F2FAEA887390F1D8F987487FECC6DEA5B2D33369C411647E404EA9BF2104DC348C68106D1826CD3AD73B614483CC0BC82969703F82789F83E8FC435AB107DBED65975742EF2388F78E839296369C7762F46E9059CEF9243D333D937937C80CE77C929EA48F201F72CE27E9719D439E27E92762DB6C8AB4620FB68FC11E8F649E4710BD1A588AD086EDC0E9C2B3414E71CC25699BEE95C8B341A639E692B4B9CD25CF0699E2984BD2E636973C1B6492632E499BDB06E75E0D32103D4128C599E895C8AB418E070639E592F41D8F6DE6503AAF06D1E67052A406D624A5F36A90139CF2483E926A90639DF2483E5CE69457837438E5917C8CF648E2D520A39CF2483E467A24F16A90E14E79241F2E734A0D227535CC238957831CED9447F2D1EE91C4AB418E72CA23F97099535E0D32D4298FE463884712AF06715916205919E891C4AB41DA9CF2483E5CE6AE578344BF0B51A4299AB852573D1E49BC1AA4D7298FE423A95D4D763BE5917C747B24F16A90379CF2483EB67924F16A9090775C4BD2B67824F16A90979CF2483E5CE69457833CE79447F2E132A7BC1AE469A73C928FB51E49BC36AF1E06BC8EEEBB4831D6E3B4CF9AD784ED029E72CA25E95BE595C8F31B7DA5632E49DBBD5E893C1B6499632E49D73EE01EAF649E0D723FB0C9319FA4E9011CE7916783F400BF71CC2769BAD53399F77BD22701CFA0AB59D29C57B04DD0937D4FFAF3C01DCE39251D37E2D81CE07F040138197812EDF62EFDB3057B2F88EBC25797E77ADFE615E0186076406EA9AF6B70BCFF7140C41104ECCEFA1AF4521DE99B0781B9D8255E575127CB5DC017D19386F2EEDE002E25A03920E627D6011BB0C726CF0BAC41AA6D1FB0107828BA9048B76203A150BC3DBE893008B893F80F4351ADF801F23F6DC0EDC47F288A6AC475C8211AC0F5C47F388AB8D80D5C8E1CD1A781D788FFB014BEB11E3813E9931381A5C47F688AF2A317F8197AC952531660CF1E477F888A72E2416016D29281C022E051E23F504531B102381F29DC2CE0666023F11FB2A27FF10CF03D60DA219F6A8545ADC56A550398019C0B9CB5FFBFB5AEAB3AF661FB56ADC67E46FD1958175A5193EADA20EF6438B61C7A1C30167B8F763BF6762B3DA0558E1E6CB95017B015E8045EC09EFBD911589788888888888888888888888888888894E2BFADA42452B9BEA33B0000000049454E44AE426082) 
AS IDPhoto
, 
GIBS_TimeTracker.TimeTrackerID, GIBS_TimeTracker.WorkDate, 
                         GIBS_TimeTracker.StartTime, 
	--Coalesce(GIBS_TimeTracker.EndTime, '') AS  EndTime, 
	--Coalesce(SUBSTRING(REPLACE(CAST(GIBS_TimeTracker.EndTime  AS VARCHAR(20)),'Jan  1 1900 12:00AM',''),1,11),'') AS EndTime,
	GIBS_TimeTracker.EndTime,
	coalesce(GIBS_TimeTracker.TotalTime,0) AS TotalTime, GIBS_TimeTracker.WorkEndDate
FROM            Users INNER JOIN
                         GIBS_TimeTracker ON Users.UserID = GIBS_TimeTracker.UserID 
						 
						 LEFT OUTER JOIN
                         GIBS_TimeTrackerIDPhoto ON Users.UserID = GIBS_TimeTrackerIDPhoto.UserID

WHERE GIBS_TimeTracker.WorkDate BETWEEN @StartDate AND @EndDate

ORDER BY GIBS_TimeTracker.StartTime


GO

/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_GetPhotoByUserID]    Script Date: 7/27/2023 2:58:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GIBS_TimeTracker_GetPhotoByUserID]


	
	@UserID int

as

SELECT        Users.Username, Users.FirstName, Users.LastName, Users.Email, Users.DisplayName, GIBS_TimeTrackerIDPhoto.IDPhoto
FROM            Users LEFT OUTER JOIN
                         GIBS_TimeTrackerIDPhoto ON Users.UserID = GIBS_TimeTrackerIDPhoto.UserID
where  Users.UserID = @UserID




GO

/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_IDPhoto_Insert]    Script Date: 7/27/2023 2:58:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GIBS_TimeTracker_IDPhoto_Insert]
(
    @UserID int,
    @IDPhoto image,
    @CreatedByUserID int
)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM GIBS_TimeTrackerIDPhoto
        WHERE UserID = @UserID)
    BEGIN
        UPDATE GIBS_TimeTrackerIDPhoto set 
		 IDPhoto = @IDPhoto,   
		 LastModifiedByUserID = @CreatedByUserID, 
		 LastModifiedOnDate = GetDate()
        WHERE UserID = @UserID 
            
    END
ELSE
    BEGIN
        INSERT INTO GIBS_TimeTrackerIDPhoto(UserID, IDPhoto, CreatedByUserID)
VALUES        (@UserID, @IDPhoto, @CreatedByUserID) 
    END

END
GO

/****** Object:  StoredProcedure [dbo].[GIBS_TimeTracker_UserFullListSearch]    Script Date: 7/27/2023 2:58:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[GIBS_TimeTracker_UserFullListSearch](
@PortalID int,	@PageIndex int,	@PageSize INT, @searchField varchar(100),
@searchCriteria varchar(100),@orderByField varchar(100),@OrderByDirection
varchar(4))
as begin

declare @CurrentPage int
--set @PageIndex=0
--set @PageIndex=@PageIndex+1
set @CurrentPage=@PageIndex
--set @PageSize=10

Declare @FirstRec int
Declare @LastRec int
if(@PageSize = -1)
begin
	Set @FirstRec = -1;
	Set @LastRec = -1;
end
else
begin
	Set @FirstRec = (@CurrentPage - 1) * @PageSize
	Set @LastRec = (@CurrentPage * @PageSize + 1) end
--select @firstrec,@lastrec	
	
--set @searchField		= N'lastname'
--set @searchCriteria		= N'r'
--set @orderByField		= N'firstname'
--set @OrderByDirection	= N'asc'




declare @tempTable TABLE(rowid int not null identity(1,1),
	PortalID int, userID int , UserName varchar(100), FirstName varchar(100), LastName varchar(100), Displayname varchar(100), Email varchar(100), 
    Street varchar(100), City varchar(100) , [state] varchar(100), PostalCode varchar(100)  
	--Cell varchar(100), Telephone varchar(100),  
--	Company varchar(100),ProspectManager varchar(100)
   -- AdditionalFirstName varchar(100), AdditionalName varchar(100), CapacityRating varchar(100), InclinationRating varchar(100), Stage varchar(100), ProspectResearch varchar(100), 
	)
insert into @tempTable
SELECT   UP.PortalID, U.UserID, UserName, FirstName, LastName, Displayname,
Email, 
        Street, City , 
		

	
 --(SELECT [Value] FROM Lists where EntryID = (SELECT PropertyValue FROM UserProfile WHERE UserId = U.UserId AND PropertyDefinitionID = (SELECT PropertyDefinitionID FROM ProfilePropertyDefinition WHERE PropertyName = 'Region' AND PortalID = @PortalID)))

 --AS  [State] 

Region as [State] 	
		, PostalCode
		--,     Company, ProspectManager
		--, Cell, Telephone, AdditionalFirstName, AdditionalName, CapacityRating, InclinationRating, Stage, ProspectResearch
 		
 FROM        [Users] U 
  INNER JOIN [UserPortals] UP ON U.UserID = UP.UserID
  -- access each Profile Property:
--	LEFT  JOIN (SELECT PortalID, UserID, PropertyValue Unit       FROM
--[ProfilePropertyDefinition] PD INNER JOIN [UserProfile] P ON PD.PropertyDefinitionID = P.PropertyDefinitionID WHERE PropertyName =
--N'Unit'           ) P_Unit      ON P_Unit.PortalID      = UP.PortalID AND
--P_Unit.UserID      = U.UserID
	LEFT  JOIN (SELECT PortalID, UserID, PropertyValue Street     FROM
[ProfilePropertyDefinition] PD INNER JOIN [UserProfile] P ON PD.PropertyDefinitionID = P.PropertyDefinitionID WHERE PropertyName =
N'Street'         ) P_Street    ON P_Street.PortalID    = UP.PortalID AND
P_Street.UserID    = U.UserID
	LEFT  JOIN (SELECT PortalID, UserID, PropertyValue City       FROM
[ProfilePropertyDefinition] PD INNER JOIN [UserProfile] P ON PD.PropertyDefinitionID = P.PropertyDefinitionID WHERE PropertyName =
N'City'           ) P_City      ON P_City.PortalID      = UP.PortalID AND
P_City.UserID      = U.UserID
	LEFT  JOIN (SELECT PortalID, UserID, PropertyValue PostalCode FROM [ProfilePropertyDefinition] PD INNER JOIN [UserProfile] P ON PD.PropertyDefinitionID = P.PropertyDefinitionID WHERE PropertyName =
N'PostalCode'     ) P_ZipCode   ON P_ZipCode.PortalID   = UP.PortalID AND
P_ZipCode.UserID   = U.UserID
	
LEFT  JOIN (SELECT PortalID, UserID, PropertyValue Region FROM [ProfilePropertyDefinition] PD INNER JOIN [UserProfile] P ON PD.PropertyDefinitionID = P.PropertyDefinitionID WHERE PropertyName =
N'Region'     ) P_Region   ON P_Region.PortalID   = UP.PortalID AND
P_Region.UserID   = U.UserID

WHERE 1=1 and U.IsDeleted = 0
AND
		(	
			(
				len(@searchField)=0  
				
				OR
				( 
					@searchField = 'firstname' AND firstname like @searchCriteria +'%'
				)
				OR
				( 
					@searchField = 'lastname' AND lastname like @searchCriteria +'%'
				)

				OR
				( 
					@searchField = 'city' AND  city like @searchCriteria +'%'
				)
				OR
				( 
					@searchField = 'email' AND  email like @searchCriteria +'%'
				)

				
			)
		)
	order by 
		CASE WHEN @orderByField		= 'LastName' AND @OrderByDirection = 'ASC' THEN lastname END ASC,
		CASE WHEN @orderByField		= 'LastName' AND @OrderByDirection = 'DESC' THEN lastname END desc, 
		CASE WHEN @orderByField	    = 'FirstName' AND @OrderByDirection = 'ASC' THEN firstname END ASC,
		CASE WHEN @orderByField		= 'FirstName' AND @OrderByDirection = 'DESC' THEN firstname END desc ,
    	CASE WHEN @orderByField		= 'email' AND @OrderByDirection = 'ASC' THEN email END ASC,
		CASE WHEN @orderByField		= 'email' AND @OrderByDirection = 'DESC' THEN email END desc, 
		
		CASE WHEN @orderByField		= 'City' AND @OrderByDirection = 'ASC' THEN city END ASC,
		CASE WHEN @orderByField		= 'City' AND @OrderByDirection = 'DESC' THEN city END desc ,
		
		--CASE WHEN @orderByField		= 'State' AND @OrderByDirection = 'ASC' THEN [state] END ASC,
		--CASE WHEN @orderByField		= 'State' AND @OrderByDirection = 'DESC' THEN [state] END desc ,
				
		CASE WHEN len(@orderByField)=0 THEN u.userid END ASC;

	
	declare @rCount int
	select @rCount=count(*)  from @tempTable	
		
	declare @numberOfPages int
	
	if(@PageSize = -1)
	begin
		set @numberOfPages = 1;
	end
	else
	begin
		set @numberOfPages =@rCount/ @PageSize
		if(@rCount % @PageSize>0)
		begin
			set @numberOfPages=@numberOfPages + 1
		end
	end	
	
	
		
select  *,
	@rCount as [totalrecords]
		,@PageSize as [RecordsperPage]
		,
		case @PageSize
		when -1 then 1
		else @numberOfPages
		end  as [NumberOfPages]
		,
		case @PageSize 
		when -1 then 1--'Page 1 of 1'
		else @CurrentPage--'Page ' + cast(@CurrentPage as varchar(15)) + ' of ' + cast(@numberOfPages as varchar(15))
		end   as [CurrentPage]	 
		
		from @tempTable where 1=1   
	and rowid > @firstrec AND rowid < @lastrec ;
	


end

GO






